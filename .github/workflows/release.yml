# This is a basic workflow to help you get started with Actions

name: Release

# Controls when the workflow will run
on:
  push: 
    tags:
    - 'v**'
  
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    # Extract the desired release version number from the git tag, and set variables
    - name: Set release version
      id: set_release_version
      run: |
        gittag=${{ github.ref }}
        [[ $gittag =~ v(([0-9]+\.[0-9]+\.[0-9]+)(-.+)?) ]]
        echo "releaseversion=${BASH_REMATCH[1]}" >> $GITHUB_ENV
        echo "releasename=${BASH_REMATCH[0]}" >> $GITHUB_ENV
        echo "assemblyversion=${BASH_REMATCH[2]}.${{github.run_number}}" >> $GITHUB_ENV
    - uses: actions/checkout@v3
    - name: Setup .NET
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: | 
          5.0.x
          6.0.x
    - name: Restore dependencies
      run: dotnet restore
    - name: Build
      run: dotnet build --no-restore -c Release /p:Version=${{ env.releaseversion }} /p:AssemblyVersion=${{ env.assemblyversion }}
    - name: Pack
      run: dotnet pack --no-build --output nupkgs -c Release /p:Version=${{ env.releaseversion }}
    # Create the release on Github
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ env.releasename }}
        release_name: Release ${{ env.releaseversion }}
        draft: false
        prerelease: false
    # Add the core package as an asset
    - name: Upload Release Asset Core
      id: upload-release-asset-core
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} 
        asset_path: ./nupkgs/Vertica.Umbraco.Headless.Core.${{ env.releaseversion }}.nupkg
        asset_name: Vertica.Umbraco.Headless.Core.${{ env.releaseversion }}.nupkg
        asset_content_type: application/zip
    # Add the swagger package as an asset
    - name: Upload Release Asset Swagger
      id: upload-release-asset-swagger 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} 
        asset_path: ./nupkgs/Vertica.Umbraco.Headless.Swagger.${{ env.releaseversion }}.nupkg
        asset_name: Vertica.Umbraco.Headless.Swagger.${{ env.releaseversion }}.nupkg
        asset_content_type: application/zip        
    - name: Push to NuGet - Core
      run: dotnet nuget push ./nupkgs/Vertica.Umbraco.Headless.Core.${{ env.releaseversion }}.nupkg -k $NUGET_AUTH_TOKEN -s https://api.nuget.org/v3/index.json
      env: 
        NUGET_AUTH_TOKEN: ${{ secrets.NUGET_TOKEN }}
    - name: Push to NuGet - Swagger
      run: dotnet nuget push ./nupkgs/Vertica.Umbraco.Headless.Swagger.${{ env.releaseversion }}.nupkg -k $NUGET_AUTH_TOKEN -s https://api.nuget.org/v3/index.json
      env: 
        NUGET_AUTH_TOKEN: ${{ secrets.NUGET_TOKEN }}
